import java.math.BigInteger;
import java.util.Scanner;
import java.util.Vector;


public class j {
	private static Scanner in;

	public static void main(String[] args) {
		int T;
		BigInteger a,m,b,n,d;
		in = new Scanner(System.in);
		T = in.nextInt();
		while (T>0){
			T--;
			a = in.nextBigInteger();
			n = in.nextBigInteger();
			b = in.nextBigInteger();
			m = in.nextBigInteger();
			
			d = n.gcd(m);
			
			if (a.mod(d) != b.mod(d)){
				System.out.println("no solution");
			}
			else { // prime factorization and ...
				Vector<BigInteger> nn = primes(n);
				Vector<BigInteger> mm = primes(m);
				
				
				BigInteger K = n.multiply(m);
				BigInteger x = (a.multiply(m).multiply(mod_inv(m,n))).mod(K);
				x = x.add((b.multiply(n).multiply(mod_inv(n,m)))).mod(K);
				System.out.println(x + " " + K);
			}
		}		
		
	}

	private static Vector<BigInteger> primes(BigInteger n){
		Vector<BigInteger> res;
		for (BigInteger i = BigInteger.ONE.add(BigInteger.ONE) ; i.compareTo(n) < 0 ; i.add(BigInteger.ONE)){
			if (n.mod(i).equals(0)){
				BigInteger temp = i;
				while (n.mod(temp).equals(0)) temp.multiply(i);
				res.add(temp.divide(i));
			}
		}
		return res;
	}
	
	private static BigInteger mod_inv(BigInteger m, BigInteger n) {
	    BigInteger bb = n, temp, q;
	    BigInteger x0 = BigInteger.ZERO;
	    BigInteger x1 = BigInteger.ONE;
	    if (n.equals(1)) return BigInteger.ONE;
	    while (m.compareTo(BigInteger.ONE) > 0) { // m > 1
	        q = m.divide(n);
	        temp = n; n = m.mod(n); m = temp;
	        temp = x0; x0 = x1.add(q.multiply(x0).negate()); x1 = temp;
	    }
	    if (x1.compareTo(BigInteger.ZERO) < 0) x1 = x1.add(bb);
	    return x1;
	}
}
