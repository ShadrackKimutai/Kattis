// Meysam Aghighi

#include <iostream>
#include <vector>
#include <queue>
#include <climits>
#include <cstring>
using namespace std;

struct edge{
	int to, w, flow;
	edge(int _to, int _w, int _flow): to(_to), w(_w), flow(_flow){} // member initialization
};

bool bfs(vector<edge> * rGraph, int V, int s, int t, int parent[])
{
    // Create a visited array and mark all vertices as not visited
    bool visited[V];
    memset(visited, 0, sizeof(visited));

    // Create a queue, enqueue source vertex and mark source vertex
    // as visited
    queue <int> q;
    q.push(s);
    visited[s] = true;
    parent[s] = -1;

    // Standard BFS Loop
    while (!q.empty())
    {
        int u = q.front();
        q.pop();

        for (int i=0;i<rGraph[u].size();i++){
        	if (!visited[rGraph[u][i].to]){
                q.push(v);
                parent[v] = u;
                visited[v] = true;
        	}
        }
//        for (int v=0; v<V; v++)
//        {
//            if (visited[v]==false && rGraph[u][v] > 0)
//            {
//                q.push(v);
//                parent[v] = u;
//                visited[v] = true;
//            }
//        }
    }

    // If we reached sink in BFS starting from source, then return
    // true, else false
    return (visited[t] == true);
}

// Returns tne maximum flow from s to t in the given graph
//int fordFulkerson(int graph[V][V], int s, int t)
int fordFulkerson(vector<edge> * graph, int V, int s, int t)
{
    int u, v;

    // Create a residual graph and fill the residual graph with
    // given capacities in the original graph as residual capacities
    // in residual graph
//    int rGraph[V][V]; // Residual graph where rGraph[i][j] indicates
//                     // residual capacity of edge from i to j (if there
//                     // is an edge. If rGraph[i][j] is 0, then there is not)
//    for (u = 0; u < V; u++)
//        for (v = 0; v < V; v++)
//             rGraph[u][v] = graph[u][v];

    vector<edge> rGraph[V];
    for (int i=0;i<graph->size();i++)
    	for (int j=0;j<graph[i].size();j++)
    		rGraph[i][j] = graph[i][j];

    int parent[V];  // This array is filled by BFS and to store path

    int max_flow = 0;  // There is no flow initially

    // Augment the flow while tere is path from source to sink
    while (bfs(rGraph, V, s, t, parent))
    {
        // Find minimum residual capacity of the edhes along the
        // path filled by BFS. Or we can say find the maximum flow
        // through the path found.
        int path_flow = INT_MAX;
        for (v=t; v!=s; v=parent[v])
        {
            u = parent[v];
            path_flow = min(path_flow, rGraph[u][v].flow);
        }

        // update residual capacities of the edges and reverse edges
        // along the path
        for (v=t; v != s; v=parent[v])
        {
            u = parent[v];
            rGraph[u][v].flow -= path_flow;
            rGraph[v][u].flow += path_flow;
        }

        // Add path flow to overall flow
        max_flow += path_flow;
    }

    // Return the overall flow
    return max_flow;
}

int main(){
	int n,m,s,t,u,v,w;
	cin >> n >> m >> s >> t;
	vector<edge> g[n];
	for (int i=0;i<m;i++){
		cin >> u >> v >> w;
		g[u].push_back(edge(v,w,0));
	}


	return 0;
}
