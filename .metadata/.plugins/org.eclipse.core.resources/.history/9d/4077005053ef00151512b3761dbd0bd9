import java.math.BigInteger;
import java.util.Scanner;
import java.util.Vector;


public class j {
	private static Scanner in;

	public static void main(String[] args) {
		int T;
//		BigInteger a,m,b,n,d,l;
		long a,m,b,n,d,l;
		in = new Scanner(System.in);
		T = in.nextInt();
		while (T>0){
			T--;
//			a = in.nextBigInteger();
//			n = in.nextBigInteger();
//			b = in.nextBigInteger();
//			m = in.nextBigInteger();
//			
			a = in.nextLong();
			n = in.nextLong();
			b = in.nextLong();
			m = in.nextLong();
			
			d = gcd(n,m);
			l = n * m / d;
			
//			d = n.gcd(m);
//			l = n.multiply(m).divide(d); // lcm
						
//			if (a.mod(d).equals(b.mod(d)) == false){
//				System.out.println("no solution");
//			}
			if (a % d != b % d){
				System.out.println("no solution");
			}
			else { // prime factorization and ...
				long ll = l;
				Vector<long> res = new Vector<long>();
				Vector<long> N = new Vector<long>();
				
				
				BigInteger ll = new BigInteger(l + "");
				Vector<BigInteger> res = new Vector<BigInteger>();
				Vector<BigInteger> N = new Vector<BigInteger>();
				for (BigInteger i = BigInteger.ONE.add(BigInteger.ONE) ; i.compareTo(ll) != 1 ; i = i.add(BigInteger.ONE)){
					BigInteger temp = BigInteger.ONE;
					while (ll.mod(i).equals(BigInteger.ZERO)){
						temp = temp.multiply(i);
						ll = ll.divide(i);
					}			
					if (temp.equals(BigInteger.ONE) == false){
						res.add(temp);
						N.add(temp);
					}
				}
				// create N and N_i						
								
				for (int i=0 ;i<res.size();i++){
					N.set(i, l.divide(res.get(i)));
				}
				
//				System.out.println(N.size());
//				for (int i=0;i<N.size();i++)
//					System.out.println(N.get(i));
				
				// set x
				BigInteger x = BigInteger.ZERO;
				for (int i=0;i<res.size();i++){
					if (res.get(i).gcd(n).equals(BigInteger.ONE))
						x = x.add((b.multiply(N.get(i).multiply(mod_inv(N.get(i), res.get(i))))).mod(l));
					else
						x = x.add((a.multiply(N.get(i).multiply(mod_inv(N.get(i), res.get(i))))).mod(l));
				}

				x = x.mod(l);

				System.out.println(x + " " + l);
			}
		}		
		
	}
	
	private static long gcd(long a, long b)
	{
	    while (b > 0)
	    {
	        long temp = b;
	        b = a % b; // % is remainder
	        a = temp;
	    }
	    return a;
	}
	
	private static BigInteger mod_inv(BigInteger m, BigInteger n) {
	    BigInteger bb = n, temp, q;
	    BigInteger x0 = BigInteger.ZERO;
	    BigInteger x1 = BigInteger.ONE;
	    if (n.equals(1)) return BigInteger.ONE;
	    while (m.compareTo(BigInteger.ONE) > 0) { // m > 1
	        q = m.divide(n);
	        temp = n; n = m.mod(n); m = temp;
	        temp = x0; x0 = x1.add(q.multiply(x0).negate()); x1 = temp;
	    }
	    if (x1.compareTo(BigInteger.ZERO) < 0) x1 = x1.add(bb);
	    return x1;
	}
}
