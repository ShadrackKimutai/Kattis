// Meysam Aghighi

#include <iostream>
#include <vector>
#include <queue>
using namespace std;

const int INF = 20000000;

struct edge{ int to, weight;};

int main(){
	int n,m,q,s,u,v,w;
	while (cin>>n>>m>>q>>s && n){
		vector <edge> adjlist[n];
		for (int i=0;i<m;i++) cin >> u >> v >> w, adjlist[u].push_back(make_pair(v,w));



//		// BFS(s) - which is wrong -> u should use dijkstra for weighted graph!
//		bool marked[n]; memset(marked,false,sizeof(marked));
//		queue <int> meysam;
//		marked[s] = true, meysam.push(s);
//		while (!meysam.empty()){
//			int x = meysam.front();
//			meysam.pop();
//			for (int i=0;i<adjlist[x].size();i++){
//				int y = adjlist[x][i].first;
//				if (!marked[y]){
//					marked[y] = true;
//					meysam.push(y);
//				}
//			}
//		}
		for (int i=0;i<q;i++){
			cin >> u;
			if (dist[u] == INF) cout << "Impossible" << endl;
			else cout << dist[u] << endl;
		}
		cout << endl;
	}
	return 0;
}
