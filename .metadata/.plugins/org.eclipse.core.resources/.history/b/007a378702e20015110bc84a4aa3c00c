// Meysam Aghighi
// Longest shortest path  (NO! not exactly!) - BFS

#include <iostream>
#include <cstdio>
#include <cstring>
#include <queue>
#include <map>
#include <set>
using namespace std;

int t,n,m;
long long temp;
map<long long,int> mapp;
int map_size;

int key(long long value){
    if (!mapp.count(value))
        mapp[value] = map_size++;
    return mapp[value];
}

int main(){
    cin >> t;
    for(int ii=0;ii<t;ii++){
//        cin >> n;
        scanf("%d",&n);
        vector<int> g[n];
//        vector<int> iin[25*n], oout[25*n]; // CHECK!
        set<int> iin[20*n], oout[20*n];
        mapp.clear();
        map_size = 0;
        for (int i=0;i<n;i++){
//            cin >> m;
            scanf("%d",&m);
            for (int j=0;j<m-1;j++){
//                cin >> temp;
                scanf("%lld",&temp);
//                iin[key(temp)].push_back(i);
                iin[key(temp)].insert(i);
            }
//            cin >> temp;
            scanf("%lld",&temp);
//            oout[key(temp)].push_back(i);
            oout[key(temp)].insert(i);
        }
        // build graph
        // using map
        int u, v;
        for (int i=0;i<map_size;i++){
//            for (int j=0;j<iin[i].size();j++){
//            for (auto &v: iin[i]){
        	for (set<int>::iterator vp = iin[i].begin(); vp != iin[i].end(); vp++){
        		v = * vp;
//        		cerr << v << endl;
//                v = iin[i][j];
//                u = -1;
        		for (set<int>::reverse_iterator rit = oout[i].rbegin();rit != oout[i].rend();rit++){
        			u = * rit;
        			if (u < v){
        				g[u].push_back(v);
        				break;
        			}
        		}
//                set<int>::iterator it = oout[i].upper_bound(v);
//                if (it != oout[i].end()){
//                    u = * it;
//                    g[u].push_back(v);
//                }
//                for (int k=0;k<oout[i].size();k++){
//                    if (oout[i][k] < v && oout[i][k] > u)
//                        u = oout[i][k];
//                }
//                if(u != -1) g[u].push_back(v);
            }
        }
        int maxx = 1;
        vector<int> answer(n,1);
        for (int i=n-2;i>=0;i--){
            for (int j=0;j<g[i].size();j++){
                v = g[i][j];
                answer[i] = max(answer[i],answer[v]+1);
                //maxx = max(maxx,answer[i]);
            }
        }
		for (int i=0;i<n;i++) maxx = max(maxx,answer[i]);
//        for (int i=0;i<n;i++) cerr << answer[i] << endl;

        cout << ii+1 << " " << maxx << endl;
    }
    return 0;
}
