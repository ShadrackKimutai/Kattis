// Meysam Aghighi

#include <iostream>
#include <vector>
#include <stack>
#include <cstring>
using namespace std;

const int N = 20000;

bool marked[N];
int comp[N], comps;
stack<int> s;
vector<int> g[N],gi[N];

void dfs(int v){
	if (marked[v]) return;
	marked[v] = true;
	for (auto &u: g[v]) dfs(u);
	s.push(v);
}

int main(){
	int t,n,m;
	cin >> t;
	while (t--){
		cin >> n >> m;
		for (int i=0;i<n;i++){
			g[i].clear();
			gi[i].clear();
		}
		s.clear();
		for (int i=0;i<m;i++){ // make graph
			cin >> u-- >> v--;
			g[u].push_back(v);
			gi[v].push_back(u);
		}
		// DFS
		memset(marked,false,sizeof(marked));
		for (int i=0;i<n;i++) dfs(i);
		// DFS 2
		memset(marked,false,sizeof(marked));
		comps = 0;
		while (!s.empty()){
			int v = s.top(); s.pop();
			dfs2(v, comps++);
		}



	}
	return 0;
}
